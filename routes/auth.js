const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("../models/User");
const Order = require("../models/Order");

const router = express.Router();

// üìå ƒêƒÉng k√Ω ng∆∞·ªùi d√πng KH√îNG c·∫ßn x√°c minh
router.post("/register", async (req, res) => {
  const { email, password } = req.body;
  if (!email || !password)
    return res.status(400).json({ message: "Thi·∫øu email ho·∫∑c m·∫≠t kh·∫©u" });

  const existing = await User.findOne({ email });
  if (existing) return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i" });

  const hashed = await bcrypt.hash(password, 10);
  const user = new User({
    email,
    password: hashed,
    isVerified: true // Cho ph√©p lu√¥n
  });

  await user.save();
  res.json({ message: "‚úÖ T·∫°o t√†i kho·∫£n th√†nh c√¥ng" });
});

// üìå ƒêƒÉng nh·∫≠p
router.post("/login", async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findOne({ email });
  if (!user) return res.status(400).json({ message: "Email kh√¥ng ƒë√∫ng" });

  const ok = await bcrypt.compare(password, user.password);
  if (!ok) return res.status(400).json({ message: "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });

  const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET);
  user.lastLogin = new Date();
  await user.save();
  res.json({ token, logoUrl: user.logoUrl });
});

// Middleware x√°c th·ª±c token
function authMiddleware(req, res, next) {
  const token = req.headers.authorization?.split(" ")[1];
  if (!token) return res.status(401).json({ message: "Kh√¥ng c√≥ token" });
  try {
    const data = jwt.verify(token, process.env.JWT_SECRET);
    req.userId = data.id;
    next();
  } catch {
    res.status(401).json({ message: "Token kh√¥ng h·ª£p l·ªá" });
  }
}

// üìå Xo√° t√†i kho·∫£n + ƒë∆°n h√†ng
router.delete("/delete-account", authMiddleware, async (req, res) => {
  try {
    await Order.deleteMany({ userId: req.userId });
    await User.findByIdAndDelete(req.userId);
    res.json({ message: "ƒê√£ xo√° t√†i kho·∫£n v√† to√†n b·ªô ƒë∆°n h√†ng" });
  } catch (err) {
    res.status(500).json({ message: "Xo√° th·∫•t b·∫°i", error: err });
  }
});

module.exports = router;
