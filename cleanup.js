// cleanup.js ‚Äî d·ªçn d·∫πp user kh√¥ng ho·∫°t ƒë·ªông an to√†n
const mongoose = require("mongoose");
const dotenv = require("dotenv");
dotenv.config();
const User = require("./models/User");

async function deleteInactiveUsers() {
  try {
    console.log("üöÄ B·∫Øt ƒë·∫ßu ki·ªÉm tra user kh√¥ng ho·∫°t ƒë·ªông...");

    // Ng∆∞·ª°ng th·ªùi gian 30 ng√†y tr∆∞·ªõc
    const cutoff = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);

    // T√¨m c√°c user c√≥ lastLogin t·ªìn t·∫°i v√† nh·ªè h∆°n cutoff, v√† KH√îNG ph·∫£i admin
    const usersToDelete = await User.find({
      lastLogin: { $exists: true, $lt: cutoff },
      role: { $ne: "admin" } // N·∫øu b·∫°n kh√¥ng c√≥ role admin, c√≥ th·ªÉ b·ªè d√≤ng n√†y
    });

    if (usersToDelete.length === 0) {
      console.log("‚úÖ Kh√¥ng c√≥ t√†i kho·∫£n n√†o c·∫ßn xo√°.");
      return;
    }

    console.log(`‚ö†Ô∏è T√¨m th·∫•y ${usersToDelete.length} user kh√¥ng ho·∫°t ƒë·ªông >30 ng√†y:`);
    usersToDelete.forEach(u => console.log(` - ${u.email} (lastLogin: ${u.lastLogin})`));

    // Xo√° th·∫≠t s·ª±
    const result = await User.deleteMany({
      lastLogin: { $exists: true, $lt: cutoff },
      role: { $ne: "admin" }
    });

    console.log(`üóëÔ∏è ƒê√£ xo√° ${result.deletedCount} t√†i kho·∫£n.`);
  } catch (err) {
    console.error("‚ùå L·ªói xo√° user:", err);
  }
}

mongoose.connect(process.env.MONGODB_URI)
  .then(async () => {
    console.log("‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB");
    await deleteInactiveUsers();
    process.exit(0);
  })
  .catch(err => {
    console.error("‚ùå L·ªói k·∫øt n·ªëi MongoDB:", err);
    process.exit(1);
  });
